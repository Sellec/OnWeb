@using OnWeb.Design.Additionals.ClassicStructures
@using System.Collections

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script type="text/javascript" src="https://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>

<script type="text/javascript" src="/template/js/jquery.formstyler.min.js"></script>
<script type="text/javascript" src="/template/js/jquery.matchHeight-min.js"></script>
<script type="text/javascript" src="/template/js/jquery.jcarousel.min.js"></script>
<script type="text/javascript" src="/template/js/jquery-ui.min.js"></script>
<script type="text/javascript" src='/template/js/ajax.js'></script>
<script type="text/javascript" src='/template/js/jquery.form.js'></script>
<script type="text/javascript" src="/template/js/jquery.arcticmodal-0.3.min.js"></script>
<script type="text/javascript" src="/template/js/jquery.placeholder.js"></script>
<script type="text/javascript" src="/template/js/jquery.jcarousel-swipe.min.js"></script>
<script type="text/javascript" src="/template/js/functions.js?v=0199"></script>

<script type="text/javascript" src="https://api-maps.yandex.ru/2.1/?lang=ru_RU"></script>

<script src="https://www.google.com/recaptcha/api.js" async defer></script>

@if (ViewBag.items_map != null)
{
<script>
    //Подключение карты на странице контактов
    ymaps.ready(init);
    var myMap;

    function init(){     
        myMap = new ymaps.Map("map", {
            center: [55.38210408, 39.04159050],
            zoom: 11,
            controls: []
        }),
            clusterer = new ymaps.Clusterer({
            preset: 'twirl#blueClusterIcons',
        }),
            getPointData = function (data, photo) {
            return {
                balloonContentHeader: '<span class="map_title">' + data.name + '</span>',
                balloonContentBody: '<a href="/realty/item/' + data.id + '" class="mapsLink" target="_blank"><img src="/'+photo+'" alt="" /><span>'+number_format(data.price,0,""," ")+' '+data.currency+'</span></a>'
            };
        },
            getPointOptions = function () {
            return {
                preset: 'twirl#lightblueDotIcon'
            };
        },
        geoObjects = [];
        
        myMap.behaviors.disable('scrollZoom');
        
        @foreach (Hashtable ad in (ViewBag.items_map as Hashtable).Values)
        {
            if (ad["ymap"] != null)
            {
                var image = "template/images/nophoto.gif";
                if (ad["photo"] != null && (ad["photo"] as PhotoList).Count > 0) { image = (ad["photo"] as PhotoList)[0].preview_file; }
                <text>
                    var image = '@image';
                    var coord = '@ad["ymap"]';
                    @*
                    geoObjects[geoObjects.length] = new ymaps.Placemark(coord.split(','), getPointData(<{$ad|jsobject}>, image), getPointOptions());
                    *@
                </text>
            }
        }

        
        if (geoObjects.length>0){
            clusterer.removeAll();
            clusterer.add(geoObjects);
            myMap.geoObjects.add(clusterer);
            
            myMap.setBounds(clusterer.getBounds(), {
                checkZoomRange: true
            });
        }
        
        ZoomLayout = ymaps.templateLayoutFactory.createClass("<div id='map-buttons-zoom'>" +
                "<div id='zoom-in' class='map-zoom'>+</div>" +
                "<div id='zoom-out' class='map-zoom'>-</div>" +
            "</div>", {

            build: function () {
                ZoomLayout.superclass.build.call(this);

                this.zoomInCallback = ymaps.util.bind(this.zoomIn, this);
                this.zoomOutCallback = ymaps.util.bind(this.zoomOut, this);

                $('#zoom-in').bind('click', this.zoomInCallback);
                $('#zoom-out').bind('click', this.zoomOutCallback);
            },

            clear: function () {
                $('#zoom-in').unbind('click', this.zoomInCallback);
                $('#zoom-out').unbind('click', this.zoomOutCallback);

                ZoomLayout.superclass.clear.call(this);
            },

            zoomIn: function () {
                var map = this.getData().control.getMap();
                this.events.fire('zoomchange', {
                    oldZoom: map.getZoom(),
                    newZoom: map.getZoom() + 1
                });
            },

            zoomOut: function () {
                var map = this.getData().control.getMap();
                this.events.fire('zoomchange', {
                    oldZoom: map.getZoom(),
                    newZoom: map.getZoom() - 1
                });
            }
        }),

        zoomControl = new ymaps.control.ZoomControl({ options: { layout: ZoomLayout } });
        myMap.controls.add(zoomControl, {
            float: 'none',
            position: {
                top: 10,
                right: 10
            }
        });
        
        @*
        $('.main_list ul li a').click(function(e){
            e.preventDefault();
            
            myMap.geoObjects.removeAll();
            var idCat = parseInt($(this).attr('rel'));
            $.requestJSON('/org/getList/'+idCat, null, function(result, message, data)
            {
                if (result == JsonResult.OK){
                    myPoints = [];
                    points = [];
                    geoObjects = [];
                    for (var i in data){
                        if (data[i].coord != 'undefined' && data[i].coord != ''){
                            if (data[i].image == 'undefined' || data[i].image == '') data[i].image = '/data/img/orgNophoto.jpg'
                            geoObjects[i] = new ymaps.Placemark(data[i].coord.split(','), getPointData(i,data[i]), getPointOptions(i));
                        }
                    }
                    if (geoObjects.length>0){
                        clusterer.removeAll();
                        clusterer.add(geoObjects);
                        myMap.geoObjects.add(clusterer);
                        
                        myMap.setBounds(clusterer.getBounds(), {
                            checkZoomRange: true
                        });
                    }
                } else {
                    $("#mod_error").html(data.result);open_modal("#mod_error",'',false);
                }
            });
        });*@
    }
</script>
}
